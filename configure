#!/bin/sh
# CONFIGURE SCRIPT FOR BUILD SYSTEM - v0.1
#
# Script to configure our build environment (sets some variables, lets us define
# some parameters about our build). Run this before any makefiles (trying to run
# them before configuring will hopefully throw an error, but even if it doesn't,
# the build WILL FAIL).
#
# Preferebly, we would do everything from the makefiles, but unfortunately that
# approach proved to be too cumbersome, so we have this small helper script.
#
#
# 2019 Diogo Gomes

scriptversion="0.1"
rootsrcdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# ------------------------------------------------------------------------------
# Versions
# ------------------------------------------------------------------------------
projectname="porto"
version="$(sed -e '/Version/!d' -e 's/Version = //' ${rootsrcdir}/versions)"
release="$(sed -e '/Release/!d' -e 's/Release = //' ${rootsrcdir}/versions)"
codename="$(sed -e '/Name/!d' -e 's/Name = //' ${rootsrcdir}/versions)"

# TODO: version, plus help

# ------------------------------------------------------------------------------
# Functions
# Some helper functions
# ------------------------------------------------------------------------------
function help {
    echo "Work in progress"
    printf 'Usage: ./configure [options] ... [var=value] ...\n\n'
    printf 'All invalid options are silently ignored'
    printf 'Configuration:\n'
    printf '   -h, --help\t- display this help and exit\n' | expand -t 30
    printf '   -V, --version\t- display version information and exit\n' | expand -t 30
    printf '\n'
    printf 'Installation directories:\n'
    printf 'By default, we install everything to a sysroot\n'
    printf '   --sysroot=SYSROOT\t- use SYSROOT as a sysroot, to be able to build everything properly [./sysroot]\n' |\
    expand -t 30
    printf '   --prefix=PREFIX\t- install architecture independent files in sysroot/PREFIX [sysroot/usr/]\n' |\
    expand -t 30
    printf '   --execprefix=EPREFIX\t- install architecture dependent files in sysroot/EPREFIX [PREFIX]\n' |\
    expand -t 30
    printf '   --libdir=LDIR\t- install library files to sysroot/LDIR [execprefix/lib]\n' |\
    expand -t 30
    printf '   --includedir=IDIR\t- install header files to sysroot/IDIR [prefix/include]\n' |\
    expand -t 30
    printf '   --bootdir=BDIR\t- install the kernel file to sysroot/BDIR [/boot]\n' |\
    expand -t 30
    printf '\n\n'
    printf 'CROSS BUILD SYSTEM\n'
    printf 'Directories:\n'
    printf 'The cross build tools are in directories in the form [toolprefix]/[toolarchprefix] by default\n'
    printf '   --toolprefix=PREFIX\t- prefix to the directory where the tools are located [$HOME/opt]\n' |\
    expand -t 30
    printf '   --toolarchprefix=PREFIX\t- prefix to the specific architecture directory [$target-cross/bin]\n' |\
    expand -t 30
    printf '   --toolarchdir=DIR\t- we can specify the tool directory directly [toolprefix/toolarchprefix]\n' |\
    expand -t 30
    printf '\n'
    printf 'Programs:\n'
    printf 'For cross-compiling, we assume the tools are already installed in toolarchdir, but we can specify the name\n'
    printf 'By default, we assume the GNU toolchain (compiler and binutils) are being used, with names target-tool\n'
    printf '  --ar=AR\t- specify the archive program being used to create .ar archives [toolarchdir/target-ar]\n' |\
    expand -t 30
    printf '  --as=AS\t- specify the assembler being used [toolarchdir/target-as]\n' |\
    expand -t 30
    printf '  --cc=CC\t- specify the C compiler being used [toolarchdir/target-gcc]\n' |\
    expand -t 30
    printf '  --cxx=CXX\t- specify the C++ compiler being used [toolarchdir/target-g++]\n' |\
    expand -t 30
    printf '  --isotool=TOOL\t- specify the program being used to create the final iso (grub2) [toolprefix/grub-2/bin/grub-mkrescue]\n' |\
    expand -t 30
    printf '  --isochecktool=TOOL\t- specify the program being used to create check the final iso for multiboot (grub2) [toolprefix/grub-2/bin/grub-file]\n' |\
    expand -t 30
    printf '\n'
    printf 'Flags:\n'
    printf '   --cflags=CFLAGS\t- choose the standart flags to be used by the C compiler (besides warning flags, always active) [-O2 -ffreestanding]\n' |\
    expand -t 30
    printf '   --cxxflags=CXXFLAGS\t- choose the standart flags to be used by the C++ compiler (besides warning flags, always active) [-O2]\n' |\
    expand -t 30
    printf '   --lblags=LDLAGS\t- choose the standart flags to be used by the linker [ ]\n' |\
    expand -t 30
    printf '   --libs=LIBS\t- libraries to pass to the linker [ ]\n' |\
    expand -t 30
    printf '   --enable-debug\t- include debugging symbols\n' | expand -t 30
    printf '   --disable-debug\t- do not include debugging symbols\n' | expand -t 30
    printf '\n\n'
    printf './configure version %s, written by Diogo Gomes\n' ${scriptversion}
    printf 'Report any bugs to the author\n'
    printf '\n'
}

function version {
    printf 'Porto configure version %s\n' ${scriptversion}
    printf '\nWritten by Diogo Gomes, 2019\n'
}

function target_arch {
    if echo "$1" | grep -Eq 'i[[:digit:]]86-'; then
        echo i386;
    else
        echo "$1" | grep -Eo '^[[:alnum:]_]*';
    fi
}

function log_header {
    echo ""
    echo ""
    echo "###################################################"
    echo ""
    echo "$1"
    echo ""
    echo "###################################################"
}

# ------------------------------------------------------------------------------
# User-defined Variables
# ------------------------------------------------------------------------------

for arg in "$@"; do
    case "$arg" in
    -V)
        version
        exit 0
        ;;
    --version)
        version
        exit 0
        ;;
    --toolprefix=*)
        toolprefix=`echo $arg | sed 's/--toolprefix=//'`
        ;;
    --toolarchprefix=*)
        toolarchprefix=`echo $arg | sed 's/--toolarchprefix=//'`
        ;;
    --toolarchdir=*)
        toolarchdir=`echo $arg | sed 's/--toolarchdir=//'`
        ;;
    --ar=*)
        ar=`echo $arg | sed 's/--ar=//'`
        ;;
    --as=*)
        as=`echo $arg | sed 's/--as=//'`
        ;;
    --cc=*)
        cc=`echo $arg | sed 's/--cc=//'`
        ;;
    --cxx=*)
        cxx=`echo $arg | sed 's/--cxx=//'`
        ;;
    --isotool=*)
        isotool=`echo $arg | sed 's/--isotool=//'`
        ;;
    --isochecktool=*)
        isochecktool=`echo $arg | sed 's/--isochecktool=//'`
        ;;
    --sysroot=*)
        sysroot=`echo $arg | sed 's/--sysroot=//'`
        ;;

    --prefix=*)
        prefix=`echo $arg | sed 's/--prefix=//'`
        ;;
    --execprefix=*)
        execprefix=`echo $arg | sed 's/--execprefix=//'`
        ;;
    --bootdir=*)
        bootdir=`echo $arg | sed 's/--bootdir=//'`
        ;;
    --libdir=*)
        libdir=`echo $arg | sed 's/--libdir=//'`
        ;;
    --includedir=*)
        includedir=`echo $arg | sed 's/--includedir=//'`
        ;;

    --with-libc)
        withlibc="libc.a"
        ;;
    --without-libc)
        withlibc=""
        ;;

    --cflags=*)
        cflags=`echo $arg | sed 's/--cflags=//'`
        ;;
    --cxxflags=*)
        cxxflags=`echo $arg | sed 's/--cxxflags=//'`
        ;;
    --ldflags=*)
        ldflags=`echo $arg | sed 's/--ldflags=//'`
        ;;
    --libs=*)
        libs=`echo $arg | sed 's/--libs=//'`
        ;;

    --log-file=*)
        configlog=`echo $arg | sed 's/--log-file=//'`
        ;;

    --enable-debug)
        debugsym=true;;
    --disable-debug)
        debugsym=false;; # linux configure command log file

    --help)
        help
        exit 0
        ;;
    -h)
        help
        exit 0
        ;;
    esac
done

# ------------------------------------------------------------------------------
# Defaults
# These are the default values for our build variables
# ------------------------------------------------------------------------------

target=i686-elf # TODO: add targetarch
targetarch=$(target_arch ${target})

# Directories
toolprefix=${toolprefix:-${HOME}/opt/}
toolarchprefix=${toolarchprefix:-${target}-cross/bin/}
toolarchdir=${toolarchdir:-${toolprefix}/${toolarchprefix}}
ar=${ar:-${toolarchdir}/${target}-ar}
as=${as:-${toolarchdir}/${target}-as}
cc=${cc:-${toolarchdir}/${target}-gcc}
cxx=${cxx:-${toolarchdir}/${target}-g++}
isotool=${isotool:-${toolprefix}/grub-2/bin/grub-mkrescue}
isochecktool=${isochecktool:-${toolprefix}/grub-2/bin/grub-file}
sysroot=${sysroot:-${rootsrcdir}/sysroot}

# Target directories
prefix=${prefix:-/usr}
execprefix=${execprefix:-${prefix}}
bootdir=${bootdir:-/boot}
libdir=${libdir:-${execprefix}/lib}
includedir=${includedir:-${prefix}/include}

#Targets
withlibc=${withlibc:-""} # Default because we're nowhere near ready for libc
withlibk="libk.a"

# Tool flags
cflags=${cflags:-"-O2 -ffreestanding"}
cxxflags=${cxxflags:-"-O2"}
ldflags=${ldflags:-""}
libs=${libs:-""}

debugsym=${debugsym:-true}


# ------------------------------------------------------------------------------
# Checking whether we have everything we expect to build the project
# Then generate a config.log
# ------------------------------------------------------------------------------

if [ -z $configlog ]; then
    configlog=${rootsrcdir}/config.log
fi

if ! [ -w $configlog ] && [ -f $configlog ]; then
    printf 'Error: Could not open log file: %s\n' ${configlog}
    printf 'Aborting\n'
    exit 3
fi

echo "CONFIGURATION LOG" > ${configlog}
echo "" >> ${configlog}
echo "Generated by configure version ${scriptversion}" >> ${configlog}
echo "" >> ${configlog}
echo "INVOCATION = $0 $@" >> ${configlog}
echo "DATE = $(date)" >> ${configlog}
echo "" >> ${configlog}
echo "PLATFORM---------" >> ${configlog}
echo "hostname = $(hostname)" | tee -a ${configlog}
echo "Machine Hardware (uname -m) = $(uname -m)" | tee -a ${configlog}
echo "Kernel Release (uname -r) = $(uname -r)" | tee -a ${configlog}
# Fixed a bug!
echo "Kernel Name (uname -s) = $(uname -s)" | tee -a ${configlog}
echo "Kernel Version (uname -v) = $(uname -v)" | tee -a ${configlog}
echo "" >> ${configlog}

echo "Using cross build tool directory ${toolarchdir}" | tee -a ${configlog}

printf 'Checking whether CC compiler is present ...'
log_header CC >> ${configlog}
if ${cc} -v &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: CC compiler not found' | tee -a ${configlog}
    exit 4
fi

printf 'Checking whether CXX compiler is present ...'
log_header CXX >> ${configlog}
if ${cxx} -v &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: CXX compiler not found' | tee -a ${configlog}
    exit 4
fi

printf 'Checking whether AR is present ...'
log_header AR >> ${configlog}
if ${ar} --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: AR not found' | tee -a ${configlog}
    exit 4
fi

printf 'Checking whether AS is present ...'
log_header AS >> ${configlog}
if ${ar} --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: AS not found' | tee -a ${configlog}
    exit 4
fi

printf 'Checking whether xorriso is present ...'
log_header xorriso >> ${configlog}
if xorriso --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: xorriso not found' | tee -a ${configlog}
    exit 4
fi

printf 'Checking whether ISOTOOL is present ...'
log_header ISOTOOL >> ${configlog}
if ${isotool} --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: ISOTOOL not found' | tee -a ${configlog}
    exit 4
fi

printf 'Checking whether qemu-system-%s is present ...' ${targetarch}
log_header qemu-system-${targetarch} >> ${configlog}
if qemu-system-${targetarch} --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    printf 'Error: qemu-system-%s not found' ${targetarch} | tee -a ${configlog}
    exit 4
fi

printf 'Checking make version ...'
log_header MAKE >> ${configlog}
if make --version &>> ${configlog}; then
    printf ' done\n'
else
    printf ' no\n'
    echo 'Error: make not found' | tee -a ${configlog}
    exit 4
fi

# ------------------------------------------------------------------------------
# Generating the build files
# ------------------------------------------------------------------------------

# Destination of config.mk
makefiles=`find ${rootsrcdir} -name Makefile.in | sed 's/\.in *$//'`
makeconfig=${rootsrcdir}/config/make/config.mk
outputconfig=${rootsrcdir}/config/make/output.mk.in

if ! [ -w $makeconfig ] && [ -f $makeconfig ]; then
    printf 'Error: Could not open ${makeconfig}\n'
    printf 'Aborting\n'
    exit 2
fi

for name in ${makefiles}; do
    if ! [ -w $name ] && [ -f $name ]; then
        printf 'Error: Could not open ${name}\n'
        printf 'Aborting\n'
        exit 2
    fi
done

echo "Generating ${makeconfig} ..."

# Header of the file
echo "# MAIN CONFIGURATION FILE FOR MAKEFILE" > ${makeconfig}
echo "#" >> ${makeconfig}
echo "# Autogenerated by configure version ${scriptversion} on $(date)" >> ${makeconfig}
echo "# CHANGE IT AT YOUR OWN RISK!" >> ${makeconfig}
echo "override SHELL:=/bin/sh" >> ${makeconfig}
echo "unexport" >> ${makeconfig}

# Writing configs to file
echo "TARGET:=${target}" >> ${makeconfig}
echo "TARGETARCH:=${targetarch}" >> ${makeconfig}
echo "ROOT_SRCDIR:=${rootsrcdir}" >> ${makeconfig}
echo "AR=${ar}" >> ${makeconfig}
echo "AS=${as}" >> ${makeconfig}
echo "CC=${cc}" >> ${makeconfig}
echo "CXX=${cxx}" >> ${makeconfig}
echo "ISOTOOL:=${isotool}" >> ${makeconfig}
echo "ISOCHECKTOOL:=${isochecktool}" >> ${makeconfig}
echo "SYSROOT:=${sysroot}" >> ${makeconfig}
echo "PREFIX?=${prefix}" >> ${makeconfig}
echo "EXEC_PREFIX?=${execprefix}" >> ${makeconfig}
echo "BOOTDIR?=${bootdir}" >> ${makeconfig}
echo "LIBDIR?=${libdir}" >> ${makeconfig}
echo "INCLUDEDIR?=${includedir}" >> ${makeconfig}
echo "LIBC-BIN:=${withlibc}" >> ${makeconfig}
echo "LIBK-BIN:=${withlibk}" >> ${makeconfig}
echo "LIBBINARIES:=${withlibk} ${withlibc}" >> ${makeconfig}
if $debugsym; then
    echo "CFLAGS:= ${cflags} -g" >> ${makeconfig}
    echo "CXXFLAGS:= ${cxxflags} -g" >> ${makeconfig}
else
    echo "CFLAGS:= ${cflags}" >> ${makeconfig}
    echo "CXXFLAGS:= ${cxxflags}" >> ${makeconfig}
fi
echo "LDFLAGS:= ${ldflags}" >> ${makeconfig}
echo "LIBS:= ${libs}" >> ${makeconfig}

echo "PROJECT_NAME:= ${projectname}" >> ${makeconfig}
echo "VERSION:= ${version}" >> ${makeconfig}
echo "RELEASE:= ${release}" >> ${makeconfig}
echo "CODENAME:= ${codename}" >> ${makeconfig}

echo "MADE_CONFIG:=true" >> ${makeconfig}

echo "MAKECONFIG:=${makeconfig}" >> ${makeconfig}

# Writing end of autofile comment
echo "# ------------------------------------------------------------------------------" >> ${makeconfig}
echo "# End of autoconfigured file" >> ${makeconfig}
echo "# ------------------------------------------------------------------------------" >> ${makeconfig}

# Writing the rest of the makeconfig
echo "" >> ${makeconfig}
python ${rootsrcdir}/build-scripts/comment-cleanup.py ${makeconfig}.in ${makeconfig}
echo "" >> ${makeconfig}
python ${rootsrcdir}/build-scripts/comment-cleanup.py ${outputconfig} ${makeconfig} # Some configurations for the make output

# Writing all makefiles
for name in ${makefiles}; do
    cat ${makeconfig} > $name
    echo "" >> $name
    python ${rootsrcdir}/build-scripts/comment-cleanup.py ${name}.in $name
    echo "Generating ${name} ..."
done

# Writing make variables to config.log
printf '\n\n\nWRITTEN FILES----------\n' >> ${configlog}
for name in ${makefiles}; do
    echo $name >> ${configlog}
done
printf '\n\n\nMAKE VARIABLES---------\n' >> ${configlog}
echo "override SHELL:=/bin/sh" >> ${configlog}
echo "TARGET:=${target}" >> ${configlog}
echo "TARGETARCH:=${targetarch}" >> ${configlog}
echo "ROOT_SRCDIR:=${rootsrcdir}" >> ${configlog}
echo "AR=${ar}" >> ${configlog}
echo "AS=${as}" >> ${configlog}
echo "CC=${cc}" >> ${configlog}
echo "CXX=${cxx}" >> ${configlog}
echo "ISOTOOL:=${isotool}" >> ${configlog}
echo "ISOCHECKTOOL:=${isochecktool}" >> ${configlog}
echo "SYSROOT:=${sysroot}" >> ${configlog}
echo "PREFIX?=${prefix}" >> ${configlog}
echo "EXEC_PREFIX?=${execprefix}" >> ${configlog}
echo "BOOTDIR?=${bootdir}" >> ${configlog}
echo "LIBDIR?=${libdir}" >> ${configlog}
echo "INCLUDEDIR?=${includedir}" >> ${configlog}
echo "LIBC-BIN:=${withlibc}" >> ${configlog}
echo "LIBK-BIN:=${withlibk}" >> ${configlog}
echo "LIBBINARIES:=${withlibk} ${withlibc}" >> ${configlog}
if $debugsym; then
    echo "CFLAGS:= ${cflags} -g" >> ${configlog}
    echo "CXXFLAGS:= ${cxxflags} -g" >> ${configlog}
else
    echo "CFLAGS:= ${cflags}" >> ${configlog}
    echo "CXXFLAGS:= ${cxxflags}" >> ${configlog}
fi
echo "LDFLAGS:= ${ldflags}" >> ${configlog}
echo "LIBS:= ${libs}" >> ${configlog}
echo "PROJECT_NAME:= ${projectname}" >> ${configlog}
echo "VERSION:= ${version}" >> ${configlog}
echo "RELEASE:= ${release}" >> ${configlog}
echo "CODENAME:= ${codename}" >> ${configlog}
echo "MADE_CONFIG:=true" >> ${configlog}
echo "MAKECONFIG:=${makeconfig}" >> ${configlog}


echo 'Configuration complete, type make to build.'