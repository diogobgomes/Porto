#!/bin/sh
# CONFIGURE SCRIPT FOR BUILD SYSTEM - v0.1
#
# Script to configure our build environment (sets some variables, lets us define
# some parameters about our build). Run this before any makefiles (trying to run
# them before configuring will hopefully throw an error, but even if it doesn't,
# the build WILL FAIL).
#
# Preferebly, we would do everything from the makefiles, but unfortunately that
# approach proved to be too cumbersome, so we have this small helper script.
#
#
# 2019 Diogo Gomes

scriptversion="0.1"

# ------------------------------------------------------------------------------
# Functions
# Some helper functions
# ------------------------------------------------------------------------------
function help {
    echo "Work in progress"
}

function target_arch {
    if echo "$1" | grep -Eq 'i[[:digit:]]86-'; then
        echo i386;
    else
        echo "$1" | grep -Eo '^[[:alnum:]_]*';
    fi
}

function log_header {
    echo ""
    echo ""
    echo "###################################################"
    echo ""
    echo "$1"
    echo ""
    echo "###################################################"
}

# ------------------------------------------------------------------------------
# Defaults
# These are the default values for our build variables
# ------------------------------------------------------------------------------

target=i686-elf # TODO: add targetarch
targetarch=$(target_arch ${target})

# Directories
rootsrcdir=$(pwd)
toolprefix=${HOME}/opt/
toolarchprefix=${target}-cross/bin/
toolarchdir=${toolprefix}${toolarchprefix}
ar=${toolarchdir}${target}-ar
as=${toolarchdir}${target}-as
cc=${toolarchdir}${target}-gcc
cxx=${toolarchdir}${target}-g++
isotool=${toolprefix}/grub-2/bin/grub-mkrescue
isochecktool=${toolprefix}/grub-2/bin/grub-file
sysroot=${rootsrcdir}/sysroot

# Target directories
prefix=/usr
execprefix=${prefix}
bootdir=/boot
libdir=${execprefix}/lib
includedir=${prefix}/include

# Tool flags
cflags="-O2 -ffreestanding"
cxxflags="-O2"
ldflags=
libs=

debugsym=true

for arg in "$@"; do
    case "$arg" in
    --toolprefix=*)
        toolprefix=`echo $arg | sed 's/--toolprefix=//'`
        ;;
    --toolarchprefix=*)
        toolarchprefix=`echo $arg | sed 's/--toolarchprefix=//'`
        ;;
    --toolarchdir=*)
        toolarchdir=`echo $arg | sed 's/--toolarchdir=//'`
        ;;
    --ar=*)
        ar=`echo $arg | sed 's/--ar=//'`
        ;;
    --as=*)
        as=`echo $arg | sed 's/--as=//'`
        ;;
    --cc=*)
        cc=`echo $arg | sed 's/--cc=//'`
        ;;
    --cxx=*)
        cxx=`echo $arg | sed 's/--cxx=//'`
        ;;
    --isotool=*)
        isotool=`echo $arg | sed 's/--isotool=//'`
        ;;
    --isochecktool=*)
        isochecktool=`echo $arg | sed 's/--isochecktool=//'`
        ;;
    --sysroot=*)
        sysroot=`echo $arg | sed 's/--sysroot=//'`
        ;;

    --prefix=*)
        prefix=`echo $arg | sed 's/--prefix=//'`
        ;;
    --execprefix=*)
        execprefix=`echo $arg | sed 's/--execprefix=//'`
        ;;
    --bootdir=*)
        bootdir=`echo $arg | sed 's/--bootdir=//'`
        ;;
    --libdir=*)
        libdir=`echo $arg | sed 's/--libdir=//'`
        ;;
    --includedir=*)
        includedir=`echo $arg | sed 's/--includedir=//'`
        ;;

    --cflags=*)
        cflags=`echo $arg | sed 's/--cflags=//'`
        ;;
    --cxxflags=*)
        cxxflags=`echo $arg | sed 's/--cxxflags=//'`
        ;;

    --enable-debug)
        debugsym=true;;
    --disable-debug)
        debugsym=false;;

    --help)
        echo 'usage: ./configure [options]'
        echo 'options:'
        echo '  --prefix=<path>: installation prefix'
        echo '  --enable-debug: include debug symbols'
        echo '  --disable-debug: do not include debug symbols'
        echo 'all invalid options are silently ignored'
        exit 0
        ;;
    esac
done

# ------------------------------------------------------------------------------
# Checking whether we have everything we expect to build the project
# Then generate a config.log
# ------------------------------------------------------------------------------

configlog=config.log

echo "CONFIGURATION LOG" > ${configlog}
echo "" >> ${configlog}
echo "Generated by configure version ${scriptversion}" >> ${configlog}
echo "" >> ${configlog}
echo "INVOCATION = $0 $@" >> ${configlog}
echo "DATE = $(date)" >> ${configlog}
echo "" >> ${configlog}
echo "PLATFORM---------" >> ${configlog}
echo "hostname = $(hostname)" | tee -a ${configlog}
echo "Machine Hardware (uname -m) = $(uname -m)" | tee -a ${configlog}
echo "Kernel Release (uname -r) = $(uname -r)" | tee -a ${configlog}
echo "Kernel Name (uname -s) = $(uname -n)" | tee -a ${configlog}
echo "Kernel Version (uname -v) = $(uname -v)" | tee -a ${configlog}
echo "" >> ${configlog}

printf 'Checking whether CC compiler is present ...'
log_header CC >> ${configlog}
if ${cc} -v &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: CC compiler not found' | tee -a ${configlog}
    exit 2
fi

printf 'Checking whether CXX compiler is present ...'
log_header CXX >> ${configlog}
if ${cxx} -v &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: CXX compiler not found' | tee -a ${configlog}
    exit 2
fi

printf 'Checking whether AR is present ...'
log_header AR >> ${configlog}
if ${ar} --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: AR not found' | tee -a ${configlog}
    exit 2
fi

printf 'Checking whether AS is present ...'
log_header AS >> ${configlog}
if ${ar} --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: AS not found' | tee -a ${configlog}
    exit 2
fi

printf 'Checking whether xorriso is present ...'
log_header xorriso >> ${configlog}
if xorriso --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: xorriso not found' | tee -a ${configlog}
    exit 2
fi

printf 'Checking whether ISOTOOL is present ...'
log_header ISOTOOL >> ${configlog}
if ${isotool} --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: ISOTOOL not found' | tee -a ${configlog}
    exit 2
fi

printf 'Checking whether qemu-system-${targetarch} is present ...'
log_header qemu-system-${targetarch} >> ${configlog}
if qemu-system-${targetarch} --version &>> ${configlog}; then
    printf ' yes\n'
else
    printf ' no\n'
    echo 'Error: qemu-system-${targetarch} not found' | tee -a ${configlog}
    exit 2
fi

printf 'Checking make version ...'
log_header MAKE >> ${configlog}
if make --version &>> ${configlog}; then
    printf ' done\n'
else
    printf ' no\n'
    echo 'Error: make not found' | tee -a ${configlog}
    exit 2
fi

# ------------------------------------------------------------------------------
# Generating the build files
# ------------------------------------------------------------------------------

# Destination of config.mk
makefiles=`find . -name Makefile.in | sed 's/.in//'`
makeconfig=config/make/config.mk
outputconfig=config/make/output.mk.in

echo "Generating ${makeconfig} ..."

# Header of the file
echo "# MAIN CONFIGURATION FILE FOR MAKEFILE" > ${makeconfig}
echo "#" >> ${makeconfig}
echo "# Autogenerated by configure version ${scriptversion} on $(date)" >> ${makeconfig}
echo "# CHANGE IT AT YOUR OWN RISK!" >> ${makeconfig}
echo "override SHELL:=/bin/sh" >> ${makeconfig}

# Writing configs to file
echo "TARGET:=${target}" >> ${makeconfig}
echo "TARGETARCH:=${targetarch}" >> ${makeconfig}
echo "ROOT_SRCDIR:=${rootsrcdir}" >> ${makeconfig}
echo "AR=${ar}" >> ${makeconfig}
echo "AS=${as}" >> ${makeconfig}
echo "CC=${cc}" >> ${makeconfig}
echo "CXX=${cxx}" >> ${makeconfig}
echo "ISOTOOL:=${isotool}" >> ${makeconfig}
echo "ISOCHECKTOOL:=${isochecktool}" >> ${makeconfig}
echo "SYSROOT:=${sysroot}" >> ${makeconfig}
echo "PREFIX?=${prefix}" >> ${makeconfig}
echo "EXEC_PREFIX?=${execprefix}" >> ${makeconfig}
echo "BOOTDIR?=${bootdir}" >> ${makeconfig}
echo "LIBDIR?=${libdir}" >> ${makeconfig}
echo "INCLUDEDIR?=${includedir}" >> ${makeconfig}
if $debugsym; then
    echo "CFLAGS:= ${cflags} -g" >> ${makeconfig}
    echo "CXXFLAGS:= ${cxxflags} -g" >> ${makeconfig}
else
    echo "CFLAGS:= ${cflags}" >> ${makeconfig}
    echo "CXXFLAGS:= ${cxxflags}" >> ${makeconfig}
fi
echo "LDFLAGS:= ${ldflags}" >> ${makeconfig}
echo "LIBS:= ${libs}" >> ${makeconfig}

echo "MADE_CONFIG:=true" >> ${makeconfig}

echo "MAKECONFIG:=${makeconfig}" >> ${makeconfig}

# Writing end of autofile comment
echo "# ------------------------------------------------------------------------------" >> ${makeconfig}
echo "# End of autoconfigured file" >> ${makeconfig}
echo "# ------------------------------------------------------------------------------" >> ${makeconfig}

# Writing the rest of the makeconfig
echo "" >> ${makeconfig}
cat ${makeconfig}.in >> ${makeconfig}
echo "" >> ${makeconfig}
cat ${outputconfig} >> ${makeconfig} # Some configurations for the make output

# Writing all makefiles
for name in ${makefiles}; do
    cat ${makeconfig} > $name
    echo "" >> $name
    cat ${name}.in >> $name
done

# Writing make variables to config.log
printf '\n\n\nMAKE VARIABLES---------\n' >> ${configlog}
echo "override SHELL:=/bin/sh" >> ${configlog}
echo "TARGET:=${target}" >> ${configlog}
echo "TARGETARCH:=${targetarch}" >> ${configlog}
echo "ROOT_SRCDIR:=${rootsrcdir}" >> ${configlog}
echo "AR=${ar}" >> ${configlog}
echo "AS=${as}" >> ${configlog}
echo "CC=${cc}" >> ${configlog}
echo "CXX=${cxx}" >> ${configlog}
echo "ISOTOOL:=${isotool}" >> ${configlog}
echo "ISOCHECKTOOL:=${isochecktool}" >> ${configlog}
echo "SYSROOT:=${sysroot}" >> ${configlog}
echo "PREFIX?=${prefix}" >> ${configlog}
echo "EXEC_PREFIX?=${execprefix}" >> ${configlog}
echo "BOOTDIR?=${bootdir}" >> ${configlog}
echo "LIBDIR?=${libdir}" >> ${configlog}
echo "INCLUDEDIR?=${includedir}" >> ${configlog}
if $debugsym; then
    echo "CFLAGS:= ${cflags} -g" >> ${configlog}
    echo "CXXFLAGS:= ${cxxflags} -g" >> ${configlog}
else
    echo "CFLAGS:= ${cflags}" >> ${configlog}
    echo "CXXFLAGS:= ${cxxflags}" >> ${configlog}
fi
echo "LDFLAGS:= ${ldflags}" >> ${configlog}
echo "LIBS:= ${libs}" >> ${configlog}
echo "MADE_CONFIG:=true" >> ${configlog}
echo "MAKECONFIG:=${makeconfig}" >> ${configlog}



echo 'Configuration complete, type make to build.'