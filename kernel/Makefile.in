# KERNEL DIRECTORY MAKEFILE - v0.1
#
# Not ready to be used as Makefile, it's used by the configure script to build
# the final Makefile, that will be used to build the kernel
#
# If you haven't already, run the configure script in the top level directory!
#
# In the final makefile, run 'make help' for a list of targets
#
#
# 2019 Diogo Gomes

# TODO
# add help target
# check local build directories

SCRIPTVERSION:=0.1

ifneq ($(MADE_CONFIG),true)
$(error We're not properly configured, run ./configure!!)
endif

DESTDIR?=$(SYSROOT)

# Default compiler flags

CFLAGS:=$(CFLAGS)
CKFLAGS:= -D__is_kernel -Iinclude
CXXFLAGS:=$(CXXFLAGS)
CXXKFLAGS:=
LDFLAGS:=$(LDFLAGS)
LIBS:=$(LIBS) -nostdlib -lk -lgcc

ARCHDIR=arch/$(TARGETARCH)

include $(ARCHDIR)/arch.mk

CFLAGS:=$(CFLAGS) $(KERNEL_ARCH_CFLAGS)
CXXFLAGS:=$(CXXFLAGS) $(KERNEL_ARCH_CXXFLAGS)
LDFLAGS:=$(LDFLAGS) $(KERNEL_ARCH_LDFLAGS)
LIBS:=$(LIBS) $(KERNEL_ARCH_LIBS)

KERNEL_OBJS=\
$(KERNEL_ARCH_OBJS) \
kernel/kernel.o \

OBJS=\
$(ARCHDIR)/crti.o \
$(ARCHDIR)/crtbegin.o \
$(KERNEL_OBJS) \
$(ARCHDIR)/crtend.o \
$(ARCHDIR)/crtn.o \

LINK_LIST=\
$(LDFLAGS) \
$(ARCHDIR)/crti.o \
$(ARCHDIR)/crtbegin.o \
$(KERNEL_OBJS) \
$(LIBS) \
$(ARCHDIR)/crtend.o \
$(ARCHDIR)/crtn.o \

.PHONY: all clean install install-kernel
.SUFFIXES: .o .c .S

all: $(PROJECT_NAME).kernel

$(PROJECT_NAME).kernel: $(OBJS) $(ARCHDIR)/linker.ld
	$(call cmd,ld)
	$(Q)$(CC) -T $(ARCHDIR)/linker.ld -o $@ $(CFLAGS) $(LINK_LIST)
	@echo '   Checking for multiboot'
	$(Q)if $(ISOCHECKTOOL) --is-x86-multiboot $(PROJECT_NAME).kernel; then \
	  echo '   Multiboot confirmed!'; \
	else \
	  echo '   Error: No valid multiboot!'; \
	  exit 10; \
	fi;

$(ARCHDIR)/crtbegin.o $(ARCHDIR)/crtend.o:
	$(call cmd,cp)
	$(Q)cp $(shell $(CC) $(CFLAGS) $(LDFLAGS) -print-file-name=$(@F)) $@

%.o: %.c
	$(call cmd,cc)
	$(Q)$(CC) -MD -c $< -o $@ -std=gnu11 $(CFLAGS) $(CKFLAGS)

%.o: %.S
	$(call cmd,as)
	$(Q)$(CC) -MD -c $< -o $@ $(CFLAGS) $(CKFLAGS)

clean:
	-$(Q)rm -f $(PROJECT_NAME).kernel
	-$(Q)rm -f $(shell find . -name '*.o')
	-$(Q)rm -f $(shell find . -name '*.d')
	@echo '   Clean done!'

install: install-kernel

install-kernel: $(PROJECT_NAME).kernel $(DESTDIR)$(BOOTDIR)/$(PROJECT_NAME).kernel

$(DESTDIR)$(BOOTDIR)/$(PROJECT_NAME).kernel: $(PROJECT_NAME).kernel
	@echo '   Installing kernel to $(DESTDIR)$(BOOTDIR)'
	$(Q)mkdir -p $(DESTDIR)$(BOOTDIR)
	$(Q)cp $(PROJECT_NAME).kernel $(DESTDIR)$(BOOTDIR)

-include $(OBJS:.o=.d)

.PHONY: help

help:
	@printf 'Usage: make [target] ...\n\n'
	@printf 'Options:\n'
	@printf '   V=0|1\t- 0 for normal output, 1 for verbosity\n' |\
	expand -t 30
	@echo "   There are various variable you can set, but it's better to configure them in ./configure"
	@printf '\n'
	@printf 'Miscellaneous:\n'
	@printf '   help\t- Show this help\n' | expand -t 30
	@printf '\n'
	@printf 'Build:\n'
	@printf '   [directory]/target]\t- Builds specified target\n' | expand -t 30
	@printf '   $(PROJECT_NAME).kernel\t- Link the final kernel image\n' | expand -t 30
	@printf '\n'
	@printf 'Installing:\n'
	@printf '   install\n'
	@printf '   install-kernel\t- Installs the kernel to $(DESTDIR)$(BOOTDIR)\n' |\
	expand -t 30
	@printf '\n'
	@printf 'Cleaning:\n'
	@printf '   clean\t- Remove most generated files' | expand -t 30
	@printf '\n\n'
	@printf 'Written by Diogo Gomes, v%s\n' '$(SCRIPTVERSION)'
	@printf '\n'
